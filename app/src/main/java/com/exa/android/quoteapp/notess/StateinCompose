In Jetpack Compose, state is a fundamental concept that allows UI elements to react to changes in the
underlying data. Managing state correctly is crucial for building reactive and dynamic UIs. Here's a
 detailed overview of how state works in Composables, including its types, usage, and best practices.

1. What is State in Composables?
In Compose, state refers to data that can change over time and needs to trigger UI updates when it
changes. It ensures that when the state of a component changes, the corresponding UI element is re-composed
(i.e., redrawn) with the updated data.

Unlike traditional XML-based Android development, where you manually update UI elements in response
to state changes, Compose handles this automatically through its declarative paradigm.

2. Types of State in Composables
a. Remembered State
The most common way to manage state in Compose is using the remember function, which keeps the value
across recompositions but not across configuration changes (like screen rotation).

kotlin
Copy code
@Composable
fun Counter() {
    var count by remember { mutableStateOf(0) }
    Button(onClick = { count++ }) {
        Text("Count: $count")
    }
}
remember: This function ensures that the state is kept between recompositions of the same function call.
mutableStateOf: Creates a state holder that will automatically trigger recomposition when the value changes.
by: This is used to avoid the need for calling .value to access or modify the state (using Kotlin’s
property delegation).


b. RememberSaveable
While remember keeps state across recompositions, it does not preserve state across configuration
changes (e.g., screen rotation). For that, you can use rememberSaveable.

@Composable
fun Counter() {
    var count by rememberSaveable { mutableStateOf(0) }
    Button(onClick = { count++ }) {
        Text("Count: $count")
    }
}
rememberSaveable: In addition to preserving state across recompositions, it also saves the state
during configuration changes, such as screen rotations or process death.


c. Derived State
When a piece of state is derived from other states and recomputation would be wasteful,
Compose provides the derivedStateOf function to optimize this. This is particularly useful to avoid
unnecessary recompositions.

@Composable
fun DerivedStateExample() {
    var width by remember { mutableStateOf(100) }
    var height by remember { mutableStateOf(200) }

    val area by remember {
        derivedStateOf { width * height }
    }

    Text("Area: $area")
}
derivedStateOf: Creates a derived state that will recompute only when the input state changes.


3. State Hoisting
State hoisting is a pattern used to make state accessible to multiple composables and to enable
easier testing and reusability. In Compose, state hoisting involves moving the state up to a
composable’s parent and passing it down via parameters. This ensures the parent manages the state,
while the child composable focuses on UI rendering.

Example:

@Composable
fun Counter() {
    var count by rememberSaveable { mutableStateOf(0) }
    CounterDisplay(count, { count++ })
}

@Composable
fun CounterDisplay(count: Int, onIncrement: () -> Unit) {
    Button(onClick = { onIncrement() }) {
        Text("Count: $count")
    }
}
In this example, the Counter composable holds the state, but it passes the state and the increment
logic down to CounterDisplay. This separation allows for better reuse and modularity.

4. State in ViewModels
For more complex state management, such as handling UI state across different screens or surviving
process death, it’s better to use a ViewModel. The ViewModel will hold the state and provide it to Composables.

@Composable
fun MyScreen(viewModel: MyViewModel = viewModel()) {
    val uiState by viewModel.uiState.collectAsState()

    Text(text = uiState.title)
}
ViewModel: Helps maintain state across configuration changes and survives longer than a single
composable lifecycle.
collectAsState: Used to convert a Flow or StateFlow into a Compose-compatible state that triggers
recomposition when the underlying data changes.


5. Recomposition and State
Recomposition is the process by which Jetpack Compose redraws the UI when a state changes. It’s essential
to understand how state changes trigger recompositions to avoid performance issues.

When a state changes, Compose will recompose only the part of the UI tree that depends on that state.
Remember to manage the granularity of state to minimize unnecessary recompositions. For instance,
moving expensive calculations outside recomposition, or using derivedStateOf for complex computed values.


6. Best Practices for State in Compose
a. Keep UI State in the Same Scope as the UI
Avoid mixing UI state (such as text input, button clicks) with business logic state (like data fetched
from the network). This makes it easier to test and maintain the UI layer.

b. Use Immutable Data Structures
Whenever possible, use immutable data types like StateFlow or LiveData. Mutable state can become difficult
to manage and debug in larger applications.

c. Prefer ViewModel for Long-lived State
For states that need to persist beyond the lifespan of a single composable (such as navigating between screens),
use ViewModel to hold that state.

d. Minimize Recomposition
Avoid recomposing unnecessary parts of the UI. Move expensive calculations or derived data out of
recomposition scopes using remember or derivedStateOf.

7. Common Functions Related to State
remember: Retains state across recompositions.
rememberSaveable: Retains state across recompositions and saves it during configuration changes.
mutableStateOf: Creates a state holder that triggers recomposition when changed.
derivedStateOf: Creates a state derived from other states, optimized for recomposition efficiency.
rememberCoroutineScope: For managing coroutines inside composables, where the lifecycle is tied to the
composition.


8. State in Lists (LazyColumn)
In lists, especially large datasets, managing state efficiently is important. For example, if you're
using LazyColumn to display a list of items, each item's state should be remembered appropriately to
 ensure smooth scrolling and performance.


@Composable
fun LazyColumnWithState() {
    LazyColumn {
        items(100) { index ->
            var isSelected by remember { mutableStateOf(false) }
            Text(
                text = "Item $index",
                modifier = Modifier.clickable { isSelected = !isSelected },
                color = if (isSelected) Color.Red else Color.Black
            )
        }
    }
}


Conclusion
State in Jetpack Compose is a powerful mechanism that enables reactive and dynamic UIs. By leveraging
functions like remember, rememberSaveable, and state hoisting, you can efficiently manage state in your
 composables, ensuring optimal performance and code maintainability. For complex scenarios,
 ViewModels and state containers like StateFlow help maintain state across lifecycles, ensuring a
 robust and scalable application.



 Recomposition in Jetpack Compose =>

 How Ui Updates/ Need for Recomposition :

 In View system followed in XML we manually update the ui by finding views and then assign updated value but
 in Compose the UI of system changes using Recomposition. Firstly Ui is created by following initial
 composition and then recomposition occurs. Since, compose depends on state as state changes the composable
 recompose, therefore to update ui we need to somehow change the state and then JC by default change it.
 That's why only we use state objects within composable and let them updated always. So, instead of find
 views and then assign them val we change the state.

 JC performs these operations using call site. For each composable a unique call site is created ie
 the composable runs uniquely and if these are same as of previous it just cancel the recomposition.
 
 Call Site: This is where a composable function is called in the source code. The call site influences
  where the composable appears in the UI tree and how it is tracked by Jetpack Compose.

  Why preserving identity matters?
  It’s important to keep track of where composables are placed in the UI so that side effects (like
  animations, data fetching, etc.) don’t restart with every little change in the app. By preserving
  the identity of composables across recompositions, Jetpack Compose can ensure that these side effects
  continue smoothly without resetting or interrupting.


 Recomposition is the process in Jetpack Compose that updates the UI in response to changes in the state.
  When a state variable associated with a Composable changes, Jetpack Compose automatically re-runs the
  corresponding Composable functions to update the UI.

 Selective Recomposition: Jetpack Compose is optimized to recompose only the parts of the UI where the
  state has changed. If a Composable function is part of a larger UI tree, only the affected subtrees
  will be recomposed when their parent data changes.

 Control by Compose: The decision of which Composable functions to re-run is fully handled by
  Jetpack Compose, so developers cannot manually control which specific functions get recomposed.

 Best Practices for Recomposition:
 Minimize the Number of Functions and Lambdas:

 Try to keep the number of Composable functions and lambdas as low as possible, as recomposition runs
 these functions frequently.
 Use Pure Functions for Composables:

 A pure function is a function that receives inputs and returns outputs without causing any side effects
 like storing data or modifying states. Composables should not perform tasks like data assignment or storage
 directly inside the function.
 Avoid Asynchronous Tasks in Composables:

 Composables should not handle asynchronous tasks (like network requests) directly. Instead, use
  state management to trigger recomposition when asynchronous operations are completed.
 Parallel Recomposition:

 The order in which Composables are recomposed is not guaranteed. Recomposition can happen in parallel,
  so Composables must be stateless and deterministic to ensure correct behavior.
 Optimizations of Recomposition:
 Composable Skipping: Jetpack Compose is smart enough to skip recomposing as many functions and lambdas
 as possible if their associated state has not changed.

 Optimistic Recomposition: If recomposition is triggered but the data changes again before the process
 finishes, the ongoing recomposition will be canceled, and a new recomposition will start with the updated data.

 Frequent Recomposition: Composables can be recomposed frequently, sometimes as often as every frame
  during animations. Therefore, it’s crucial that Composables remain efficient and lightweight.

 Example of Recomposition:
 In the following example:

 kotlin
 Copy code
 @Composable
 fun NamePicker(
     header: String,
     names: List<String>
 ) {
     Column {
         Text(header)

         LazyColumn {
             items(names) { name ->
                 Text(name)
             }
         }
     }
 }
 The Text Composable displaying the header will only recompose when the header value changes.
 The LazyColumn will recompose only when the names list changes. Changes in one part of the UI won’t
 affect the other.
 Example with Recomposition:

 @Composable
 fun RecompositionExample() {
     // Initial composition
     val state = remember { mutableStateOf(0.0) }

     // Button triggers recomposition by changing the state
     Button(onClick = {
         state.value = Math.random() // Changes state, triggers recomposition
     }) {
         // This Text will recompose whenever the state changes
         Text(text = state.value.toString())
     }
 }
 When the button is clicked, the state changes (state.value is assigned a random value), which triggers
  recomposition.
 The Text Composable will recompose with the new state.value, updating the UI accordingly.
 Key Takeaways:
 Recomposition is the way Jetpack Compose keeps the UI in sync with the underlying data.
 Composables should be pure and efficient to handle frequent recompositions, especially during animations.
 Jetpack Compose optimizes recomposition by skipping unnecessary re-renders and can cancel ongoing
 recomposition if the data changes again.


 -----------------------------------------------------************--------------------------------------------------**********----------------------------
